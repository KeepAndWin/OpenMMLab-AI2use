2023/02/04 19:59:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 344907638
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.109
    GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
    PyTorch: 1.10.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.1+cu113
    OpenCV: 4.6.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/04 19:59:22 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='DenseNet', arch='121'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1024,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'CustomDataset'
data_preprocessor = dict(
    num_classes=5,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        ann_file='data/flower/train.txt',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        ann_file='data/flower/val.txt',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=(1, ))
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        ann_file='data/flower/val.txt',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=(1, ))
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[30, 60, 90], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=8, val_interval=1)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=1024)
default_scope = 'mmcls'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
log_level = 'INFO'
load_from = './densenet121_4xb256_in1k_20220426-07450f99.pth'
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = 'work/flower'

2023/02/04 19:59:31 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/04 19:59:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([64, 3, 7, 7]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stem.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.norm1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.norm1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.0.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.norm1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.norm1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.conv1.weight - torch.Size([128, 96, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.1.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.conv1.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.2.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.norm1.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.norm1.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.conv1.weight - torch.Size([128, 160, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.3.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.conv1.weight - torch.Size([128, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.4.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.norm1.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.norm1.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.conv1.weight - torch.Size([128, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.block.5.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.conv1.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.0.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.norm1.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.norm1.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.conv1.weight - torch.Size([128, 160, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.1.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.conv1.weight - torch.Size([128, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.2.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.norm1.weight - torch.Size([224]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.norm1.bias - torch.Size([224]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.conv1.weight - torch.Size([128, 224, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.3.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.conv1.weight - torch.Size([128, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.4.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.norm1.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.norm1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.conv1.weight - torch.Size([128, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.5.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.norm1.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.norm1.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.conv1.weight - torch.Size([128, 320, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.6.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.norm1.weight - torch.Size([352]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.norm1.bias - torch.Size([352]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.conv1.weight - torch.Size([128, 352, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.7.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.conv1.weight - torch.Size([128, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.8.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.norm1.weight - torch.Size([416]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.norm1.bias - torch.Size([416]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.conv1.weight - torch.Size([128, 416, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.9.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.norm1.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.norm1.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.conv1.weight - torch.Size([128, 448, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.10.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.norm1.weight - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.norm1.bias - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.conv1.weight - torch.Size([128, 480, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.block.11.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.0.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.norm1.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.norm1.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.conv1.weight - torch.Size([128, 288, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.1.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.norm1.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.norm1.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.conv1.weight - torch.Size([128, 320, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.2.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.norm1.weight - torch.Size([352]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.norm1.bias - torch.Size([352]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.conv1.weight - torch.Size([128, 352, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.3.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.norm1.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.norm1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.conv1.weight - torch.Size([128, 384, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.4.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.norm1.weight - torch.Size([416]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.norm1.bias - torch.Size([416]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.conv1.weight - torch.Size([128, 416, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.5.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.norm1.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.norm1.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.conv1.weight - torch.Size([128, 448, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.6.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.norm1.weight - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.norm1.bias - torch.Size([480]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.conv1.weight - torch.Size([128, 480, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.7.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.conv1.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.8.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.norm1.weight - torch.Size([544]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.norm1.bias - torch.Size([544]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.conv1.weight - torch.Size([128, 544, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.9.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.norm1.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.norm1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.conv1.weight - torch.Size([128, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.10.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.norm1.weight - torch.Size([608]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.norm1.bias - torch.Size([608]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.conv1.weight - torch.Size([128, 608, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.11.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.norm1.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.norm1.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.conv1.weight - torch.Size([128, 640, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.12.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.norm1.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.norm1.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.conv1.weight - torch.Size([128, 672, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.13.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.norm1.weight - torch.Size([704]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.norm1.bias - torch.Size([704]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.conv1.weight - torch.Size([128, 704, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.14.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.norm1.weight - torch.Size([736]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.norm1.bias - torch.Size([736]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.conv1.weight - torch.Size([128, 736, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.15.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.conv1.weight - torch.Size([128, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.16.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.norm1.weight - torch.Size([800]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.norm1.bias - torch.Size([800]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.conv1.weight - torch.Size([128, 800, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.17.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.norm1.weight - torch.Size([832]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.norm1.bias - torch.Size([832]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.conv1.weight - torch.Size([128, 832, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.18.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.norm1.weight - torch.Size([864]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.norm1.bias - torch.Size([864]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.conv1.weight - torch.Size([128, 864, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.19.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.conv1.weight - torch.Size([128, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.20.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.norm1.weight - torch.Size([928]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.norm1.bias - torch.Size([928]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.conv1.weight - torch.Size([128, 928, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.21.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.norm1.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.norm1.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.conv1.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.22.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.norm1.weight - torch.Size([992]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.norm1.bias - torch.Size([992]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.conv1.weight - torch.Size([128, 992, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.block.23.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.conv1.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.0.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.norm1.weight - torch.Size([544]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.norm1.bias - torch.Size([544]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.conv1.weight - torch.Size([128, 544, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.1.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.norm1.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.norm1.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.conv1.weight - torch.Size([128, 576, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.2.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.norm1.weight - torch.Size([608]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.norm1.bias - torch.Size([608]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.conv1.weight - torch.Size([128, 608, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.3.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.norm1.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.norm1.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.conv1.weight - torch.Size([128, 640, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.4.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.norm1.weight - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.norm1.bias - torch.Size([672]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.conv1.weight - torch.Size([128, 672, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.5.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.norm1.weight - torch.Size([704]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.norm1.bias - torch.Size([704]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.conv1.weight - torch.Size([128, 704, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.6.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.norm1.weight - torch.Size([736]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.norm1.bias - torch.Size([736]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.conv1.weight - torch.Size([128, 736, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.7.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.conv1.weight - torch.Size([128, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.8.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.norm1.weight - torch.Size([800]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.norm1.bias - torch.Size([800]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.conv1.weight - torch.Size([128, 800, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.9.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.norm1.weight - torch.Size([832]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.norm1.bias - torch.Size([832]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.conv1.weight - torch.Size([128, 832, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.10.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.norm1.weight - torch.Size([864]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.norm1.bias - torch.Size([864]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.conv1.weight - torch.Size([128, 864, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.11.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.norm1.weight - torch.Size([896]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.norm1.bias - torch.Size([896]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.conv1.weight - torch.Size([128, 896, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.12.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.norm1.weight - torch.Size([928]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.norm1.bias - torch.Size([928]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.conv1.weight - torch.Size([128, 928, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.13.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.norm1.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.norm1.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.conv1.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.14.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.norm1.weight - torch.Size([992]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.norm1.bias - torch.Size([992]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.conv1.weight - torch.Size([128, 992, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.block.15.conv2.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.0.conv.weight - torch.Size([128, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.1.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.1.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.1.conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.2.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.2.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.2.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.3.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.transitions.3.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/02/04 19:59:32 - mmengine - INFO - Load checkpoint from ./densenet121_4xb256_in1k_20220426-07450f99.pth
2023/02/04 19:59:32 - mmengine - INFO - Checkpoints will be saved to /root/mmclassification-dev-1.x/work/flower.
2023/02/04 19:59:43 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 19:59:43 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/04 19:59:46 - mmengine - INFO - Epoch(val) [1][18/18]  accuracy/top1: 92.8322
2023/02/04 19:59:56 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 19:59:56 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/04 19:59:58 - mmengine - INFO - Epoch(val) [2][18/18]  accuracy/top1: 94.7552
2023/02/04 20:00:09 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:00:09 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/04 20:00:11 - mmengine - INFO - Epoch(val) [3][18/18]  accuracy/top1: 94.9301
2023/02/04 20:00:22 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:00:22 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/04 20:00:24 - mmengine - INFO - Epoch(val) [4][18/18]  accuracy/top1: 94.5804
2023/02/04 20:00:35 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:00:35 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/04 20:00:37 - mmengine - INFO - Epoch(val) [5][18/18]  accuracy/top1: 95.4545
2023/02/04 20:00:48 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:00:48 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/02/04 20:00:50 - mmengine - INFO - Epoch(val) [6][18/18]  accuracy/top1: 96.6783
2023/02/04 20:01:01 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:01:01 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/02/04 20:01:03 - mmengine - INFO - Epoch(val) [7][18/18]  accuracy/top1: 95.6294
2023/02/04 20:01:13 - mmengine - INFO - Exp name: densenet121_4xb256_in1k_20230204_195921
2023/02/04 20:01:13 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/02/04 20:01:15 - mmengine - INFO - Epoch(val) [8][18/18]  accuracy/top1: 95.1049
